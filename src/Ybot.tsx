/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, Suspense } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

const CONFIDENCE = 0.3

const getAngle = (p1: any, p2: any, c1: any, c2: any, m: any) => {
  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE){
    return (Math.atan2(p2['position']['y'] - p1['position']['y'], p2['position']['x'] - p1['position']['x']) + c1) * m;
  }
  return c2 * m
}

const normalize = (min: any, max: any, val: any) => {
  return ((val - min) / (max - min))* Math.PI;
}

const getYRotation = (p1: any, p2: any, p3: any) => {
  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE && p3['score'] > CONFIDENCE){
    let e1 = Math.abs(p1['position']['x'] - p3['position']['x'])
    let e2 = Math.abs(p2['position']['x'] - p3['position']['x'])
    return normalize(-100, 100, e2-e1) - Math.PI/2;
  }
  return 0
}

const getZRotation = (p1: any, p2: any) => {
  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE){
    let e1 = Math.abs(p1['position']['y'])
    let e2 = Math.abs(p2['position']['y'] )
    return normalize(-80, 80, e2-e1) - Math.PI/2;
  }
  return 0
}

export function Model(props: any) {
  let kp;
  const group = useRef();
  const { nodes, materials }: any = useGLTF('./ybot.glb');

  useFrame((state, delta) => {
    kp = props.getJoints();
    try {
      // Left arm & elbow
      nodes.Alpha_Surface.skeleton.bones[7].rotation.y = getAngle(kp[5], kp[7], 0, 0, -1)
      nodes.Alpha_Surface.skeleton.bones[9].rotation.x = getAngle(kp[7], kp[9], 0, 0, 1)

      //Right arm & elbow
      nodes.Alpha_Surface.skeleton.bones[31].rotation.y = getAngle(kp[8], kp[6], 0, 0, -1)
      nodes.Alpha_Surface.skeleton.bones[33].rotation.x = getAngle(kp[10], kp[8], 0, 0, -1)
    
      // Left leg & knee
      nodes.Alpha_Surface.skeleton.bones[55].rotation.z =  getAngle(kp[11], kp[13], (Math.PI/2), Math.PI, -1)
      //nodes.Alpha_Surface.skeleton.bones[56].rotation.z = getAngle(kp[15], kp[13], (Math.PI/2), 0, -1)

      // Right leg & knee
      nodes.Alpha_Surface.skeleton.bones[60].rotation.z =  getAngle(kp[12], kp[14], (Math.PI/2), Math.PI, -1)
      //nodes.Alpha_Surface.skeleton.bones[61].rotation.z = getAngle(kp[16], kp[14], (Math.PI/2), 0, -1)

      // Head
      nodes.Alpha_Surface.skeleton.bones[5].rotation.y = getYRotation(kp[1], kp[2], kp[0])
      nodes.Alpha_Surface.skeleton.bones[5].rotation.z = getZRotation(kp[1], kp[2])
    } catch (error) {
      console.log(error);
    }
  });

  return (
    <Suspense fallback={null}>
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={[0.1, 0.1, 0.1]} position={[0, -10, -10]}>
            <primitive object={nodes.mixamorigHips} />
            <skinnedMesh name="Alpha_Joints" geometry={nodes.Alpha_Joints.geometry} material={materials.Alpha_Joints_MAT} skeleton={nodes.Alpha_Joints.skeleton} />
            <skinnedMesh name="Alpha_Surface" geometry={nodes.Alpha_Surface.geometry} material={materials.Alpha_Body_MAT} skeleton={nodes.Alpha_Surface.skeleton} />
          </group>
        </group>
      </group>
    </Suspense>    
  )
}

useGLTF.preload('./ybot.glb');
